{"ast":null,"code":"import { ADD_COMMENT, SET_COMMENT, DEL_COMMENT, EDIT_COMMENT } from '../types';\nexport const commentReducer = (state = [], action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case SET_COMMENT:\n      {\n        const {\n          comments\n        } = payload;\n        return comments;\n      }\n\n    case ADD_COMMENT:\n      {\n        const {\n          newComment\n        } = payload;\n        return [...state, newComment];\n      }\n\n    case DEL_COMMENT:\n      {\n        return payload;\n      }\n\n    case EDIT_COMMENT:\n      {\n        const {\n          changedPost\n        } = payload;\n        return state.map(el => changedPost.id === el.id ? changedPost : el);\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"sources":["/Users/lidiiamiloserdova/Internet-programming/lab4/Interview-in-IT/client/src/redux/reducers/comment.reducer.js"],"names":["ADD_COMMENT","SET_COMMENT","DEL_COMMENT","EDIT_COMMENT","commentReducer","state","action","type","payload","comments","newComment","changedPost","map","el","id"],"mappings":"AAAA,SAAUA,WAAV,EAAsBC,WAAtB,EAAkCC,WAAlC,EAA8CC,YAA9C,QAAkE,UAAlE;AAEA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACpD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AAEE,SAAKN,WAAL;AAAkB;AAChB,cAAM;AAAEQ,UAAAA;AAAF,YAAeD,OAArB;AACA,eAAOC,QAAP;AACD;;AAED,SAAKT,WAAL;AAAkB;AAChB,cAAM;AAAEU,UAAAA;AAAF,YAAiBF,OAAvB;AACA,eAAO,CAAC,GAAGH,KAAJ,EAAWK,UAAX,CAAP;AACD;;AAED,SAAKR,WAAL;AAAkB;AACf,eAAOM,OAAP;AACF;;AAED,SAAKL,YAAL;AAAmB;AACjB,cAAM;AAAEQ,UAAAA;AAAF,YAAkBH,OAAxB;AACA,eAAOH,KAAK,CAACO,GAAN,CAAUC,EAAE,IAAIF,WAAW,CAACG,EAAZ,KAAmBD,EAAE,CAACC,EAAtB,GAA2BH,WAA3B,GAAyCE,EAAzD,CAAP;AACD;;AAED;AAAS;AACP,eAAOR,KAAP;AACD;AAvBH;AAyBD,CA5BM","sourcesContent":["import {  ADD_COMMENT,SET_COMMENT,DEL_COMMENT,EDIT_COMMENT } from '../types'\n\nexport const commentReducer = (state = [], action) => {\n  const { type, payload } = action\n\n  switch (type) {\n\n    case SET_COMMENT: {\n      const { comments } = payload\n      return comments\n    }\n\n    case ADD_COMMENT: {\n      const { newComment } = payload\n      return [...state, newComment]\n    }\n\n    case DEL_COMMENT: {\n       return payload\n    }\n\n    case EDIT_COMMENT: {\n      const { changedPost } = payload\n      return state.map(el => changedPost.id === el.id ? changedPost : el)\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}